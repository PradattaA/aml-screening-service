version: 2.1
jobs:
  build:
    docker:
      - image: cimg/openjdk:17.0.7-node

    working_directory: ~/aml-screening-service

    steps:
      # git pull
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - aml-screening-service-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: aml-screening-service-{{ checksum "pom.xml" }}

      # build
      - run: mvn clean compile
  test:
    docker:
      - image: cimg/openjdk:17.0.7-node

    working_directory: ~/aml-screening-service
    steps:
      # git pull
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - aml-screening-service-{{ checksum "pom.xml" }}

      # Verify
      - run: mvn verify

      # store test results
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
  package:
    docker:
      - image: cimg/openjdk:17.0.7-node

    working_directory: ~/aml-screening-service
    steps:
      # git pull
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - aml-screening-service-{{ checksum "pom.xml" }}

      # package into a jar
      - run: mvn clean package

      # store raw contents of src code
      - store_artifacts:
          path: target/classes
          destination: aml-screening-service

  publish-docker:
    docker:
      - image: cimg/openjdk:17.0.7-node
    working_directory: ~/aml-screening-service
    steps:
      - checkout
      - restore_cache:
          keys:
            - aml-screening-service-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline
      - run: cp .mvn/wrapper/settings.xml ~/.m2/settings.xml
      - run: echo "<settingsSecurity><master>${maven_security_master}</master></settingsSecurity>" > ~/.m2/settings-security.xml
      - run:
          name: Publish Docker image with Jib
          command: |
            ./mvnw compile jib:build -B -DskipTests=true \
              -Dbuild.number=${CIRCLE_BUILD_NUM} \
              -Dcommit.hash=${CIRCLE_SHA1} \
              -Dcircle.workflow.guid=${CIRCLE_WORKFLOW_ID} \
              -Dbuild.user=${CIRCLE_PROJECT_USERNAME} \
              -Dbuild.repo=${CIRCLE_PROJECT_REPONAME} 

workflows:
  build-workflow:
    jobs:
      - build
      - test:
          requires:
            - build
      - package:
          requires:
            - test
          filters:
            branches:
              only:
                - main
      - publish-docker:
          requires:
            - test
          filters:
            branches:
              only:
                - main

